# This example copies text in preBackupSnapshot.command to file /tmp/prehook and text postBackupSnapshot.command to /tmp/posthook
# /tmp/prehook is executed in container app-server in pod custom-app in namespace prod-db before snapshot is taken and return value saved in /tmp/pre.rc
# /tmp/posthook is executed in container app-server in pod custom-app in namespace prod-db after snapshot is taken and return value saved in /tmp/post.rc
# Respective logging can be seen in  /scripts/pre-freeze.log and /scripts/post-thaw.log inside application

apiVersion: k8s.cv.io/v1
kind: CvTask
metadata:
  name: example001-mysql-python-script-text.yaml
  namespace: cv-config
spec:
  preBackupSnapshot:
    args: []
    command: |
      #!/usr/local/bin/python
      import MySQLdb
      import os
      import time
      import datetime
      dt=datetime.datetime.now().strftime("%I:%M%p on %B %d, %Y")
      file1 = open("/scripts/pre-freeze.log","a+" )
      try:
        conn = MySQLdb.connect ('localhost' , 'root' , 'password' )
        cur = conn.cursor()
        cur.execute ("select version()")
        data = cur.fetchone()
        file1.write (dt)
        file1.write ("-------------------------------------------\n")
        file1.write ("-------------------------------------------\n")
        file1.write ("\t MySQL version is %s: "%data)
        file1.write ("-------------------------------------------\n")
        file1.write ("-------------------------------------------\n")
      except:
        file1.write (dt)
        file1.write("\t unable to connect to MySQL server\n")
        file2 = open ('/tmp/freeze_snap.lock', 'w')
        file2.close()
      try:
        cur.execute (" flush tables with read lock ")
        file1.write (dt)
        file1.write ("\t using quiesce.py script - quiesce of database successful \n")
      except:
       file1.write(dt)
        file1.write( "\n unexpected error from MySQL, unable to do flush tables with read lock, Please check MySQL error logs for more info\n")
        while True:
          check = os.path.exists ("/tmp/freeze_snap.lock")
          if check == True:
            continue
          else:
            break
    commandType: ScriptText
  postBackupSnapshot:
    args: []
    command: |
      #!/usr/local/bin/python
      import MySQLdb
      import os
      import time
      import datetime
      dt=datetime.datetime.now().strftime("%I:%M%p on %B %d, %Y")
      file1 = open("/scripts/post-thaw.log","a+" )
      try:
        os.remove('/tmp/freeze_snap.lock')
        time.sleep(2)
      except Exception, e:
        print e
      try:
        conn = MySQLdb.connect ('localhost' , 'root' , 'password' )
        cur = conn.cursor()
        cur.execute ("select version()")
        data = cur.fetchone()
        file1.write (dt)
        file1.write ("-------------------------------------------\n")
        file1.write ("-------------------------------------------\n")
        file1.write ("\t MySQL version is %s: "%data)
        file1.write ("-------------------------------------------\n")
        file1.write ("-------------------------------------------\n")
      except:
        file1.write (dt)
        file1.write("\t unable to connect to MySQL server\n")
      try:
        file1.write (dt)
        file1.write ("\t executing query to unquiesce the database \n")
        cur.execute ("unlock tables")
        file1.write (dt)
        file1.write ("\t Database is in unquiesce mode now \n")
      except:
        file1.write(dt)
        file1.write( "\n unexpected error from MySQL, unable to unlock tables. Please check MySql error logs for more info \n")
        cur.close()
        conn.close()
    commandType: ScriptText
---
apiVersion: k8s.cv.io/v1
kind: CvTaskSet
metadata:
  name: example001-mysql
  namespace: cv-config
spec:
  appName: mysql-db
  appNamespace: database
  tasks:
  - cvTaskName: example001-mysql-python-script-text.yaml
    cvTaskNamespace: cv-config
    executionOrder: 1
    id: custom-testcase-123
    isDisabled: false
